/**
 * Script para manipula√ß√£o dos filtros de busca - AgroNeg
 * 
 * Funcionalidades:
 * - Ativa√ß√£o/desativa√ß√£o do select de munic√≠pios
 * - Sele√ß√£o de categorias
 * - Valida√ß√£o do formul√°rio
 * - Carregamento ass√≠ncrono de munic√≠pios do banco de dados
 */

console.log('JS filters.js carregado');

// Teste simples para verificar se o JavaScript est√° funcionando
console.log('üß™ Teste b√°sico do JavaScript - se voc√™ v√™ esta mensagem, o JS est√° funcionando');

// Teste adicional - alert para confirmar que o JS est√° funcionando
// alert('JavaScript est√° funcionando!');

document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM carregado, iniciando configura√ß√£o dos filtros...');
    
    // Elementos do DOM
    const estadoSelect = document.getElementById('estado');
    const municipioSelect = document.getElementById('municipio');
    const categorias = document.querySelectorAll('.category-option');
    const buscarBtn = document.getElementById('buscar-btn');
    
    console.log('üîç Elementos encontrados:');
    console.log('- estadoSelect:', estadoSelect ? '‚úÖ' : '‚ùå');
    console.log('- municipioSelect:', municipioSelect ? '‚úÖ' : '‚ùå');
    console.log('- categorias:', categorias.length);
    console.log('- buscarBtn:', buscarBtn ? '‚úÖ' : '‚ùå');
    
    // Teste adicional - verificar se os elementos t√™m os atributos corretos
    if (estadoSelect) {
        console.log('üìã Estado select - value:', estadoSelect.value, 'options:', estadoSelect.options.length);
    }
    if (municipioSelect) {
        console.log('üìã Munic√≠pio select - disabled:', municipioSelect.disabled, 'options:', municipioSelect.options.length);
    }
    
    // Desabilitar o select de munic√≠pios inicialmente
    if (municipioSelect) {
        municipioSelect.disabled = true;
    }
    
    // Verificar se h√° categorias na URL para pr√©-selecionar
    function preencherCategoriasDaURL() {
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has('categorias')) {
            const categoriasURL = urlParams.get('categorias').split(',');
            categorias.forEach(function(categoria) {
                if (categoriasURL.includes(categoria.dataset.value)) {
                    categoria.classList.add('active');
                }
            });
        }
    }
    
    // Chamar fun√ß√£o para pr√©-selecionar categorias da URL
    preencherCategoriasDaURL();
    
    // Se j√° houver um estado selecionado ao carregar a p√°gina, habilite o select de munic√≠pio
    if (estadoSelect && estadoSelect.value !== '') {
        municipioSelect.disabled = false;
    }
    
    // Event listener para o select de estados
    if (estadoSelect) {
        console.log('‚úÖ Event listener do estado configurado');
        estadoSelect.addEventListener('change', function() {
            console.log('üîÑ Estado alterado para:', this.value);
            console.log('üîÑ Tipo do valor:', typeof this.value);
            console.log('üîÑ Valor √© string vazia?', this.value === '');
            
            if (this.value !== '') {
                // Habilitar o select de munic√≠pios quando um estado for selecionado
                municipioSelect.disabled = false;
                console.log('‚úÖ Select de munic√≠pio habilitado');
                
                // Carregar munic√≠pios via AJAX com base no estado selecionado
                console.log('üöÄ Iniciando carregamento de munic√≠pios...');
                carregarMunicipios(this.value);
            } else {
                // Se nenhum estado for selecionado, desabilitar o select de munic√≠pios
                municipioSelect.disabled = true;
                municipioSelect.innerHTML = '<option value="">Selecione um munic√≠pio</option>';
                console.log('‚ùå Select de munic√≠pio desabilitado');
            }
        });
        
        // Teste adicional - verificar se o event listener foi adicionado
        console.log('üß™ Testando se o event listener foi adicionado...');
        
    } else {
        console.error('‚ùå Elemento estadoSelect n√£o encontrado!');
    }
    
    // Fun√ß√£o para carregar munic√≠pios via AJAX
    function carregarMunicipios(estadoId) {
        console.log('üîç Fun√ß√£o carregarMunicipios chamada com estado ID:', estadoId);
        console.log('üîç Tipo do estadoId:', typeof estadoId);
        console.log('üîç EstadoId √© v√°lido?', estadoId && estadoId !== '');
        
        // Mostrar indicador de carregamento
        municipioSelect.innerHTML = '<option value="">Carregando munic√≠pios...</option>';
        
        // Detectar caminho correto da API baseado na URL atual
        const currentPath = window.location.pathname;
        const hostname = window.location.hostname;
        
        // Se estiver no localhost, usar caminho com /Agroneg/
        // Se estiver na produ√ß√£o (agroneg.eco.br), usar caminho relativo
        // Usar API com fallback para dados est√°ticos
        let apiPath;
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            // Verificar se estamos no subdiret√≥rio /Agroneg/
            if (currentPath.includes('/Agroneg/')) {
                apiPath = '/Agroneg/api/get_municipios_fallback.php';
            } else {
                apiPath = 'api/get_municipios_fallback.php';
            }
        } else {
            apiPath = 'api/get_municipios_fallback.php';
        }
        
        console.log('üåê Hostname:', hostname);
        console.log('üìÅ Caminho atual:', currentPath);
        console.log('üîó Caminho da API:', apiPath);
        console.log('üì° URL completa:', `${apiPath}?estado_id=${estadoId}`);
        
        // Fazer requisi√ß√£o AJAX para o endpoint correto, usando estado_id
        console.log('üì° Fazendo requisi√ß√£o para:', `${apiPath}?estado_id=${estadoId}`);
        fetch(`${apiPath}?estado_id=${estadoId}`)
            .then(response => {
                console.log('üì® Resposta recebida:', response.status, response.statusText);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('üìä Dados recebidos:', data);
                
                // Limpar select de munic√≠pios
                municipioSelect.innerHTML = '<option value="">Selecione um munic√≠pio</option>';
                
                // Adicionar munic√≠pios retornados pela API
                if (data && data.length > 0) {
                    console.log(`‚úÖ Carregando ${data.length} munic√≠pios`);
                    data.forEach(municipio => {
                        const option = document.createElement('option');
                        option.value = municipio.id;
                        option.textContent = municipio.nome;
                        // Armazenar o slug no dataset para uso posterior
                        if (municipio.slug) {
                            option.dataset.slug = municipio.slug;
                        }
                        municipioSelect.appendChild(option);
                        console.log(`  - ${municipio.nome} (ID: ${municipio.id}, Slug: ${municipio.slug || 'n√£o informado'})`);
                    });
                    console.log('‚úÖ Munic√≠pios carregados com sucesso!');
                } else {
                    console.log('‚ö†Ô∏è Nenhum munic√≠pio encontrado');
                    municipioSelect.innerHTML = '<option value="">Nenhum munic√≠pio encontrado</option>';
                }
                // Habilitar o select ap√≥s o carregamento
                municipioSelect.disabled = false;
            })
            .catch(error => {
                console.error('‚ùå Erro ao carregar munic√≠pios:', error);
                console.error('‚ùå Detalhes do erro:', error.message);
                console.error('‚ùå Stack trace:', error.stack);
                municipioSelect.innerHTML = '<option value="">Erro ao carregar munic√≠pios</option>';
                // Mant√©m desabilitado em caso de erro
                municipioSelect.disabled = true;
            });
    }
    
    // REMOVIDO: Disparar evento change automaticamente
    // Isso estava causando requisi√ß√µes desnecess√°rias ao banco
    // O usu√°rio deve selecionar manualmente o estado
    
    // Event listener para as categorias
    categorias.forEach(function(categoria) {
        categoria.addEventListener('click', function() {
            // Toggle da classe active
            this.classList.toggle('active');
        });
    });
    
    // Fun√ß√£o para aplicar filtros por categoria na p√°gina atual
    function aplicarFiltrosCategoria() {
        // Coletar categorias selecionadas
        const categoriasAtivas = [];
        document.querySelectorAll('.category-option.active').forEach(function(cat) {
            categoriasAtivas.push(cat.dataset.value);
        });
        
        // Obter par√¢metros atuais da URL
        const urlParams = new URLSearchParams(window.location.search);
        const estado = urlParams.get('estado');
        const municipio = urlParams.get('municipio');
        
        // Obter slugs do estado e munic√≠pio
        const estadoSelect = document.getElementById('estado');
        const municipioSelect = document.getElementById('municipio');
        
        if (estadoSelect && municipioSelect && estadoSelect.value && municipioSelect.value) {
            const estadoSlug = estadoSelect.options[estadoSelect.selectedIndex].dataset.slug;
            const municipioOption = municipioSelect.options[municipioSelect.selectedIndex];
            
            // Verificar se o slug do estado foi obtido corretamente
            if (!estadoSlug) {
                console.error('‚ùå Slug do estado n√£o encontrado!');
                alert('Erro: Slug do estado n√£o encontrado. Tente novamente.');
                return;
            }
            
            // Usar slug da API se dispon√≠vel, sen√£o gerar dinamicamente
            let municipioSlug;
            if (municipioOption.dataset.slug) {
                municipioSlug = municipioOption.dataset.slug;
            } else {
                const municipioNome = municipioOption.textContent;
                municipioSlug = municipioNome
                    .toLowerCase()
                    .replace(/[^a-z0-9\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/-+/g, '-')
                    .replace(/^-+|-+$/g, '');
            }
            
            let url;
            
            if (categoriasAtivas.length > 0) {
                // Se h√° categorias selecionadas, redirecionar para p√°gina espec√≠fica do tipo
                const tipoSlug = categoriasAtivas[0];
                url = `/${tipoSlug}/${estadoSlug}/${municipioSlug}`;
                
                // Se houver m√∫ltiplas categorias, adicionar como par√¢metro
                if (categoriasAtivas.length > 1) {
                    url += `?categorias=${categoriasAtivas.join(',')}`;
                }
            } else {
                // Se n√£o h√° categorias selecionadas, redirecionar para p√°gina do munic√≠pio
                url = `/${estadoSlug}/${municipioSlug}`;
            }
            
            // Redirecionar para a p√°gina de resultados
            window.location.href = url;
        } else {
            alert('Por favor, selecione um estado e um munic√≠pio.');
        }
    }

    // Garantir e validar selects antes do submit
    const filterForm = document.querySelector('.filter-form');
    if (filterForm) {
        filterForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const estadoSelect = document.getElementById('estado');
            const municipioSelect = document.getElementById('municipio');
            
            const estadoId = estadoSelect.value;
            const municipioId = municipioSelect.value;

            if (!estadoId || !municipioId) {
                alert('Por favor, selecione um estado e um munic√≠pio.');
                return;
            }
            
            // Verificar se h√° categorias selecionadas
            const categoriasAtivas = [];
            document.querySelectorAll('.category-option.active').forEach(function(cat) {
                categoriasAtivas.push(cat.dataset.value);
            });
            
            // Obter slugs do estado e munic√≠pio
            const estadoSlug = estadoSelect.options[estadoSelect.selectedIndex].dataset.slug;
            const municipioOption = municipioSelect.options[municipioSelect.selectedIndex];
            
            console.log('üîç Debug - Estado selecionado:', estadoSelect.value, 'Slug:', estadoSlug);
            console.log('üîç Debug - Munic√≠pio selecionado:', municipioSelect.value, 'Nome:', municipioOption.textContent);
            
            // Verificar se o slug do estado foi obtido corretamente
            if (!estadoSlug) {
                console.error('‚ùå Slug do estado n√£o encontrado!');
                alert('Erro: Slug do estado n√£o encontrado. Tente novamente.');
                return;
            }
            
            // Usar slug da API se dispon√≠vel, sen√£o gerar dinamicamente
            let municipioSlug;
            if (municipioOption.dataset.slug) {
                municipioSlug = municipioOption.dataset.slug;
                console.log('‚úÖ Usando slug da API:', municipioSlug);
            } else {
                const municipioNome = municipioOption.textContent;
                municipioSlug = municipioNome
                    .toLowerCase()
                    .replace(/[^a-z0-9\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/-+/g, '-')
                    .replace(/^-+|-+$/g, '');
                console.log('‚ö†Ô∏è Gerando slug dinamicamente:', municipioSlug, 'de:', municipioNome);
            }
            
            let url;
            
            if (categoriasAtivas.length > 0) {
                // Se h√° categorias selecionadas, redirecionar para p√°gina espec√≠fica do tipo
                const tipoSlug = categoriasAtivas[0];
                url = `/${tipoSlug}/${estadoSlug}/${municipioSlug}`;
                
                // Se houver m√∫ltiplas categorias, adicionar como par√¢metro
                if (categoriasAtivas.length > 1) {
                    url += `?categorias=${categoriasAtivas.join(',')}`;
                }
            } else {
                // Se n√£o h√° categorias selecionadas, redirecionar para p√°gina do munic√≠pio
                url = `/${estadoSlug}/${municipioSlug}`;
            }
            
            console.log('üéØ URL final gerada:', url);
            console.log('üöÄ Iniciando redirecionamento...');
            window.location.href = url;
        });
    }

    // Remove a l√≥gica antiga de for√ßar sele√ß√£o, pois a nova abordagem √© mais limpa
}); 